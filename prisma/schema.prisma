generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  city             String?
  street           String?
  number           Int?
  zip              Int?
  principalNme     String?
  principalPhone   String?
  workManagerName  String?
  workManagerPhone String?
  wifiName         String?
  wifiPassword     String?
  deleted          Boolean         @default(false)
  deletedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  schoolType       SchoolType      @default(ELSE)
  order            Order[]
  room             Room[]
  deleter          DeletedSchool[]
  supervisor       Member?         @relation("SchoolSupervisor", fields: [supervisorId], references: [socialNumber])
  supervisorId     String?         @unique
}

// TODO: validation on rooms count per order devices count
model Room {
  id       Int      @id @default(autoincrement())
  school   School?  @relation(fields: [schoolId], references: [id])
  schoolId Int?
  name     String
  devices  Device[]
}

// TODO: add to send email verification ?
model Member {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  phone            String
  socialNumber     String          @unique
  username         String
  passwordHash     String
  deleted          Boolean         @default(false)
  deletedAt        DateTime?
  role             Role            @default(MEMBER)
  elcLicenseNumber String?
  tasks            Task[]
  openOrders       Order[]         @relation("OpenByMember")
  supervisorOrders Order[]         @relation("supervisor")
  deletedOrder     DeletedOrder[]
  deletedTask      DeletedTask[]
  deletedSchool    DeletedSchool[]
  School           School?         @relation("SchoolSupervisor")
  deletedMember    Member[]        @relation("DeletedBy")
  deleterId        Int?
  deleter          Member?        @relation("DeletedBy", fields: [deleterId], references: [id])
  deletedDevices   DeletedDevice[]
}

model Task {
  id                       Int           @id @default(autoincrement())
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  startDate                DateTime?
  endDate                  DateTime?
  note                     String?
  status                   TaskStatus    @default(PENDING)
  member                   Member?       @relation(fields: [memberId], references: [id])
  memberId                 Int?
  order                    Order?        @relation(fields: [orderId], references: [id])
  orderId                  Int?
  devices                  Device[]
  deleter                  DeletedTask[]
  deleted                  Boolean       @default(false)
  deletedAt                DateTime?
  deviceLocation           String?
  approvedByMember         Boolean       @default(false)
  approvedByMemberDate     DateTime?
  approvedBySupervisor     Boolean       @default(false)
  approvedBySupervisorDate DateTime?
  approvedByAdmin          Boolean       @default(false)
  approvedByAdminDate      DateTime?
  memberSignature          String?
  supervisorSignature      String?
  adminSignature           String?
}

model Device {
  id           Int             @id @default(autoincrement())
  serialNumber String          @unique
  room         Room?           @relation(fields: [roomId], references: [id])
  roomId       Int?
  task         Task?           @relation(fields: [taskId], references: [id])
  taskId       Int?
  status       DeviceStatus    @default(ININVENTORY)
  deleter      DeletedDevice[]
}

model Order {
  id               Int            @id @default(autoincrement())
  uid              String         @unique @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  delivaryDate     DateTime?      @db.Date
  schoolName       String?
  address          String?
  trackingNumber   String?
  devices          Int
  contactName      String?
  contactPhone     String?
  contactSignature String?
  deleted          Boolean        @default(false)
  deletedAt        DateTime?
  status           OrderStatus    @default(OPEN)
  Task             Task[]
  school           School?        @relation(fields: [schoolId], references: [id])
  schoolId         Int?
  supervisor       Member?        @relation("supervisor", fields: [supervisorId], references: [id])
  supervisorId     Int?
  deleter          DeletedOrder[]
  opener           Member[]       @relation("OpenByMember")

  @@index([delivaryDate, status])
  @@index([schoolName])
  @@index([trackingNumber])
  @@index([status])
  @@index([supervisorId])
  @@index([deleted])
  @@index([schoolId])
  @@index([supervisorId, schoolId])
}

model DeletedOrder {
  id        Int      @id @default(autoincrement())
  orderId   String   @unique
  order     Order?   @relation(fields: [orderId], references: [uid], onDelete: Cascade)
  deleterId String
  deleter   Member?  @relation(fields: [deleterId], references: [socialNumber], onDelete: NoAction)
  createdAt DateTime @default(now())
}

model DeletedTask {
  id        Int      @id @default(autoincrement())
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  deleterId String
  deleter   Member?  @relation(fields: [deleterId], references: [socialNumber], onDelete: NoAction)
  createdAt DateTime @default(now())
}

model DeletedSchool {
  id        Int      @id @default(autoincrement())
  schoolId  Int?
  school    School?  @relation(fields: [schoolId], references: [id], onDelete: NoAction)
  deleterId String
  deleter   Member?  @relation(fields: [deleterId], references: [socialNumber], onDelete: NoAction)
  createdAt DateTime @default(now())
}

model DeletedDevice {
  id        Int      @id @default(autoincrement())
  deviceId  String?
  device    Device?  @relation(fields: [deviceId], references: [serialNumber], onDelete: NoAction)
  deleterId String
  deleter   Member?  @relation(fields: [deleterId], references: [socialNumber], onDelete: NoAction)
  createdAt DateTime @default(now())
}

enum SchoolType {
  KINDERGARDEN
  YESODI
  HIGHSCHOOL
  ELSE
}

enum Role {
  SUPERVISOR
  MEMBER
  ADMIN
}

enum DeviceStatus {
  INSTALLED
  ININVENTORY
  DEFECTS
  BROKEN
}

enum TaskStatus {
  PENDING
  ASSIGNED
  STARTED
  DONE
  CANCELED
  WAITINGFORAPPROVAL
  APPROVEDBYSUPERVISOR
  APPROVEDBYTEAMLEADER
  APPROVEDBYADMIN
}

enum OrderStatus {
  OPEN
  PROCESSING
  COMPLETED
  CANCELLED
  SHIPPED
  APPROVED
  DELAYED
}
