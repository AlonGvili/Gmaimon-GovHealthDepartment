// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolType {
  KINDERGARDEN
  YESODI
  HIGHSCHOOL
  ELSE
}

enum UserRole {
  SUPERVISOR
  TEAMLEADER
  USER
  ADMIN
}

enum TaskStatus {
  PENDING
  INPROGRESS
  DONE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model School {
  id           Int           @id @default(autoincrement()) @map("school_id")
  name         String
  description  String
  address      String
  city         String
  state        String
  zip          String
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  totalDevices Int
  schoolType   SchoolType?
  buildings    Building[]
  supervisor   Supervisor?   @relation(fields: [supervisorId], references: [id])
  supervisorId Int?
  orders       SchoolOrder[]

  @@map("schools")
}

model Building {
  id         Int         @id @default(autoincrement()) @map("building_id")
  name       String
  number     String
  School     School?     @relation(fields: [schoolId], references: [id])
  schoolId   Int?
  classrooms Classroom[]

  @@map("buildings")
}

model Classroom {
  id         Int       @id @default(autoincrement()) @map("classroom_id")
  name       String
  number     String
  building   Building? @relation(fields: [buildingId], references: [id])
  buildingId Int?
  task       Task?     @relation(fields: [taskId], references: [id])
  taskId     Int?      @unique

  @@map("classrooms")
}

model Team {
  id             Int      @id @default(autoincrement()) @map("team_id")
  leaderName     String
  leaderIdNumber String   @map("User.idNumber")
  startDate      DateTime @map("start_working_date")
  totalUsers     Int
  users          User[]
  orders         Order[]

  @@map("teams")
}

model User {
  id           Int          @id @default(autoincrement()) @map("user_id")
  name         String
  email        String       @unique
  phone        String
  idNumber     String       @unique
  username     String
  passwordHash String
  role         UserRole     @default(USER)
  tasks        Task[]
  Team         Team?        @relation(fields: [teamId], references: [id])
  teamId       Int?
  supervisors  Supervisor[]

  @@map("users")
}

model Task {
  id          Int         @id @default(autoincrement()) @map("task_id")
  createdAt   DateTime    @default(now()) @map("installtion_date")
  status      TaskStatus? @default(PENDING)
  users       User[]
  signature   String
  note        String?
  device      Device[]
  deviceId    Int?
  classroom   Classroom?
  classroomId Int?

  @@map("tasks")
}

model Device {
  id           Int    @id @default(autoincrement()) @map("device_id")
  serialNumber String @unique
  task         Task   @relation(fields: [taskId], references: [id])
  taskId       Int

  @@map("devices")
}

model Supervisor {
  id       Int      @id @default(autoincrement()) @map("supervisor_id")
  idNumber String   @unique
  name     String
  email    String   @unique
  phone    String
  orders   Order[]
  schools  School[]
  user     User     @relation(fields: [userId], references: [id])
  userId   Int

  @@map("supervisors")
}

model Order {
  id              Int           @id @default(autoincrement()) @map("order_id")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  schoolName      String
  address         String
  trackingNumber  String
  amountOfDevices Int
  contactName     String
  contactPhone    String
  status          OrderStatus   @default(PENDING)
  supervisor      Supervisor?   @relation(fields: [supervisorId], references: [id])
  supervisorId    Int?
  team            Team?         @relation(fields: [teamId], references: [id])
  teamId          Int?
  schools         SchoolOrder[]

  @@map("orders")
}

model SchoolOrder {
  id       Int    @id @default(autoincrement()) @map("school_order_id")
  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  Int
}
