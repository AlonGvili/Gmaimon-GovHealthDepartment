generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id               Int        @id @default(autoincrement())
  name             String     @unique
  city             String
  street           String
  number           Int
  zip              Int
  principalNme     String
  principalPhone   String
  workManagerName  String?
  workManagerPhone String?
  wifiName         String?
  wifiPassword     String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  schoolType       SchoolType @default(ELSE)
  buildings        Building[]
  Ticket           Ticket[]
}

model Building {
  id       Int    @id @default(autoincrement())
  name     String
  number   Int
  schoolId Int
  school   School @relation(fields: [schoolId], references: [id])
  rooms    Room[]
}

// validation on rooms count per order devices count
model Room {
  id         Int       @id @default(autoincrement())
  name       String
  buildingId Int?
  building   Building? @relation(fields: [buildingId], references: [id])
  devices    Device[]
}

model Team {
  id       Int      @id @default(autoincrement())
  leaderId Int?
  members  Member[]
}

// add to send email verification
model Member {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  phone        String
  socialNumber String   @unique
  username     String
  passwordHash String
  role         Role     @default(MEMBER)
  tasks        Task[]
  team         Team?    @relation(fields: [teamId], references: [id])
  teamId       Int?
  Ticket       Ticket[]
}

model Task {
  id                       Int        @id @default(autoincrement())
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  startDate                DateTime?
  endDate                  DateTime?
  note                     String?
  status                   TaskStatus @default(PENDING)
  member                   Member?    @relation(fields: [memberId], references: [id])
  memberId                 Int?
  order                    Ticket?    @relation(fields: [orderId], references: [id])
  orderId                  Int?
  devices                  Device[]
  deviceLocation           String?
  approvedByMember         Boolean    @default(false)
  approvedByMemberDate     DateTime?
  approvedByLeader         Boolean    @default(false)
  approvedByLeaderDate     DateTime?
  approvedBySupervisor     Boolean    @default(false)
  approvedBySupervisorDate DateTime?
  approvedByAdmin          Boolean    @default(false)
  approvedByAdminDate      DateTime?
  memberSignature          String?
  leaderSignature          String?
  supervisorSignature      String?
  adminSignature           String?
}

model Device {
  id           Int    @id @default(autoincrement())
  serialNumber String
  Room         Room?  @relation(fields: [roomId], references: [id])
  roomId       Int?
  task         Task?  @relation(fields: [taskId], references: [id])
  taskId       Int?
}

model Ticket {
  id               Int          @id @default(autoincrement())
  uid              String       @unique @default(uuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  delivaryDate     DateTime?
  schoolName       String?
  address          String?
  trackingNumber   String?
  devices          Int
  contactName      String?
  contactPhone     String?
  contactSignature String?
  status           TicketStatus @default(OPEN)
  Task             Task[]
  school           School?      @relation(fields: [schoolId], references: [id])
  schoolId         Int?
  supervisor       Member?      @relation(fields: [supervisorId], references: [id])
  supervisorId     Int?
  @@unique([schoolName, devices, status], name: "ticketIdx")
}

enum SchoolType {
  KINDERGARDEN
  YESODI
  HIGHSCHOOL
  ELSE
}

enum Role {
  SUPERVISOR
  TEAMLEADER
  MEMBER
  ADMIN
}

enum TaskStatus {
  PENDING
  ASSIGNED
  STARTED
  DONE
  CANCELED
  WAITINGFORAPPROVAL
  APPROVEDBYSUPERVISOR
  APPROVEDBYTEAMLEADER
  APPROVEDBYADMIN
}

enum TicketStatus {
  OPEN
  PROCESSING
  COMPLETED
  CANCELLED
  SHIPPED
  APPROVED
}
